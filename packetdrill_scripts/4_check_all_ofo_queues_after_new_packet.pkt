// Testing out-of-order packet receiving with MPTCP
//
// a packet in the subflow ooo queue would now fit in the meta receive queue
//

0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
+0  setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
+0  bind(3, {sa_family = AF_INET, sin_port = htons(13000), sin_addr = inet_addr("192.168.0.1")}, ...) = 0
+0  listen(3, 1) = 0

+0  socket(..., SOCK_STREAM, IPPROTO_TCP) = 5
+0  setsockopt(5, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
+0  bind(5, {sa_family = AF_INET, sin_port = htons(13001), sin_addr = inet_addr("192.168.0.1")}, ...) = 0
+0  listen(5,1) = 0

+0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 10
+0  setsockopt(10, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
+0  bind(10, {sa_family = AF_INET, sin_port = htons(13002), sin_addr = inet_addr("192.168.0.1")}, ...) = 0
+0  listen(10, 1) = 0

// open first flow with mptcp
+0  < S 0:0(0) win 32792 <mss 1460,sackOK,nop,nop,nop,wscale 7,mp_capable key_a> sock(3)
+0  > S. 0:0(0) ack 1 win 28800 <mss 1460,nop,nop,sackOK,nop,wscale 7,mp_capable key_b> sock(3)
+0  < . 1:1(0) ack 1 win 257 <mp_capable key_a key_b> sock(3)
+0  accept(3, ..., ...) = 4

// open second flow with mptcp
+0  < S 0:0(0) win 32792 <mss 1460,sackOK,nop,nop,nop,wscale 7,mp_join_syn address_id=1 token=sha1_32(key_b)> sock(10)
+0  > S. 0:0(0) ack 1 win 28800 <mss 1460,nop,nop,sackOK,nop,wscale 7,mp_join_syn_ack address_id=1 sender_hmac=trunc_l64_hmac(key_b key_a)> sock(10)
+0  < . 1:1(0) ack 1 win 32792 <mp_join_ack sender_hmac=full_160_hmac(key_a key_b)> sock(10)
+0 mp_join_accept(10) = 11

+0  > . 1:1(0) ack 1 <...> sock(11)

// data on first flow
+0 < P. 1:1001(1000) ack 1 win 450 <dss dack4 dsn4=1 ssn=1 dll=1000> 	sock(4)
//+0 > . 1:1(0) ack 1001 <dss dack4> 				sock(4)

// future data on second flow, remains in ooo queue and does not fit in meta receive queue
+0 < P. 1001:2001(1000) ack 1 win 450 <dss dack4 dsn4=2001 ssn=1001 dll=1000> 		sock(11)

// packet on first sbf to make ooo packet on second fit
+0 < P. 1001:2001(1000) ack 1 win 450 <dss dack4 dsn4=1001 ssn=1001 dll=1000> 	sock(4)

// read all available data
+0 read(4, ..., 3000) = 3000
